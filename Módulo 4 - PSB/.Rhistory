# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
# Criando um dataframe
df <- data.frame( sinais = c("EMG1", "EMG2", "EMG3"),
mean = c(media_EMG1_3, media_EMG2_3, media_EMG3_3),
dp = c(dp_EMG1_3, dp_EMG2_3, dp_EMG3_3),
var = c(v_EMG1_3, v_EMG2_3, v_EMG3_3),
ca = c(coefassim_EMG1_3, coefassim_EMG2_3, coefassim_EMG3_3),
curtose = c(curt_EMG1_3, curt_EMG2_3, curt_EMG3_3))
df %>% kbl() %>% kable_styling()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("red", "blue", "green", "purple")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("pink", "orange", "gray", "yellow")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadpsM4-1.txt", header = FALSE, sep =  " ", skip = 6)
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from = 0, to = dt*(length(dadosm4$Accy)-1), by = dt)
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from=0, to = dt*(length(m4$AccY)-1), by = dt)
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from=0, to = dt*(length(dadosm4$AccY)-1), by = dt)
dadosm4 <- cbind(time = t, m4)
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from=0, to = dt*(length(dadosm4$AccY)-1), by = dt)
dadosm4 <- cbind(time = t, dadosm4)
# Plotagem do gráfico
dygraph(dadosm4[c("time", "AccY")], main = "AccY", group = "GroupName") %>%
dyRangeSelector()
# Amplitude Máxima
AmpMAX_AccY <- max(dadosm4$AccY) - min(dadosm4$AccY)
lim_min <- 0.9 * AmpMAX_AccY
# Encontrando os picos e armazenando os valores
dadosm4 <- dadosm4 %>%
mutate(pico = ifelse(dadosm4$AccY - min(dadosm4$AccY) >= lim_min, dadosm4$AccY, NA))
# Amplitude Máxima
AmpMAX_AccY <- max(dadosm4$AccY) - min(dadosm4$AccY)
lim_min <- 0.9 * AmpMAX_AccY
# Encontrando os picos e armazenando os valores
dadosm4 <- dadosm4 %>%
mutate(pico = ifelse(dadosm4$AccY - min(dadosm4$AccY) >= lim_min, dadosm4$AccY, NA))
# Amplitude Máxima
AmpMAX_AccY <- max(dadosm4$AccY) - min(dadosm4$AccY)
lim_min <- 0.9 * AmpMAX_AccY
# Encontrando os picos e armazenando os valores
dadosm4 <- dadosm4 %>%
mutate(pico = ifelse(dadosm4$AccY - min(dadosm4$AccY) >= lim_min, dadosm4$AccY, NA))
# Plotagem do gráfico
ggplot(dadosm4, aes(x = time, y = pico)) +
geom_line(na.rm = TRUE) +
labs(title = "Amplitudes de AccY >= 90% da Max. Amplitude",
x = "Tempo",
y = "AccY")
# Cálculo dos parâmetros
x <- dadosm4$Musc
# Tamanho da janela
janela <- 500
# Indice dos picos encontrados
indice_picos <- which(!is.na(dadosm4$pico))
df <- data.frame()
# Loop para percorrer os picos
for (i in indice_picos){
indx1 <-i-floor(janela/2)
indx2 <-i+ceiling(janela/2)-1
# Calculo dos valores desejados
if(indx1 > 0 & indx2 <= length(y) ){
media <- mean(y[indx1:indx2])
mediana <- median(y[indx1:indx2])
moda <- as.numeric(names(table(y[indx1:indx2]))[which.max(table(y[indx1:indx2]))])
amplitude <- max(y[indx1:indx2]) - min(y[indx1:indx2])
variancia <- var(y[indx1:indx2])
cv <- sd(y[indx1:indx2]) / mean(y[indx1:indx2])
iqr <- IQR(y[indx1:indx2])
dd <- rbind(dd, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Cálculo dos parâmetros
x <- dadosm4$Musc  # Definição da variável correta
# Tamanho da janela
janela <- 500
# Índice dos picos encontrados
indice_picos <- which(!is.na(dadosm4$pico))
# Criando um data frame vazio para armazenar os resultados
df <- data.frame()
# Loop para percorrer os picos
for (i in indice_picos){
indx1 <- i - floor(janela / 2)
indx2 <- i + ceiling(janela / 2) - 1
# Cálculo dos valores desejados
if(indx1 > 0 & indx2 <= length(x)) {
media <- mean(x[indx1:indx2])
mediana <- median(x[indx1:indx2])
moda <- as.numeric(names(table(x[indx1:indx2]))[which.max(table(x[indx1:indx2]))])
amplitude <- max(x[indx1:indx2]) - min(x[indx1:indx2])
variancia <- var(x[indx1:indx2])
cv <- sd(x[indx1:indx2]) / mean(x[indx1:indx2])
iqr <- IQR(x[indx1:indx2])
# Armazenando os resultados no data frame
df <- rbind(df, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo o data frame com os resultados
df
# Cálculo dos parâmetros
x <- dadosm4$MuscPosterior  # Definição da variável correta
# Tamanho da janela
janela <- 500
# Índice dos picos encontrados
indice_picos <- which(!is.na(dadosm4$pico))
# Criando um data frame vazio para armazenar os resultados
df <- data.frame()
# Loop para percorrer os picos
for (i in indice_picos){
indx1 <- i - floor(janela / 2)
indx2 <- i + ceiling(janela / 2) - 1
# Cálculo dos valores desejados
if(indx1 > 0 & indx2 <= length(x)) {
media <- mean(x[indx1:indx2])
mediana <- median(x[indx1:indx2])
moda <- as.numeric(names(table(x[indx1:indx2]))[which.max(table(x[indx1:indx2]))])
amplitude <- max(x[indx1:indx2]) - min(x[indx1:indx2])
variancia <- var(x[indx1:indx2])
cv <- sd(x[indx1:indx2]) / mean(x[indx1:indx2])
iqr <- IQR(x[indx1:indx2])
# Armazenando os resultados no data frame
df <- rbind(df, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo o data frame com os resultados
df
# Seleção do sinal de interesse
y <- m4$MuscPosterior
# Seleção do sinal de interesse
y <- dadosm4$MuscPosterior
# Definição do tamanho da janela (número de amostras)
Nwnd <- 500
# Gerando os índices iniciais de cada janela
indx1 <- seq(from = 1, to = length(y), by = Nwnd)
N <- length(indx1)  # Número de janelas
# Inicializando um data frame para armazenar os resultados
dfenv <- data.frame(
time = rep(NA, times = N - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(N - 1)) {
# Calcula o tempo centralizado em cada janela
dfenv$time[i] <- (indx1[i] + (indx1[i + 1] - indx1[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
dfenv$mediana[i] <- median(y[indx1[i]:indx1[i + 1]])
}
# Plotando os resultados
dygraph(dfenv, main = "Mediana x Tempo", group = "GroupName") %>%
dyRangeSelector()
library(pracma)
library(tidyverse)
# Frequência de amostragem
fs <- 1000
dt <- 1/fs
# Vetor de tempo "t"
t <- seq(from = 0, to = 30, by = dt)
# Média desejada
media <- 0.8
# Desvio padrão desejado
desvio_padrao <- 1.3
# Numero de amostrar
amostras <- fs * t
# Calculando amplitudes do EMG1 com base na funcao randn()
amplitudes_ <- randn(n = length(t), m = 1)
amplitudes_EMG1 <- media + desvio_padrao * amplitudes_
# Criando um dataframe para o sinal EMG1
df_EMG1 <- data.frame(Amplitudes = amplitudes_EMG1, t = t)
# Plotando o sinal EMG1 com o ggplot
ggplot_1 <- ggplot2::ggplot(df_EMG1, aes (x = t, y = Amplitudes)) +
geom_line() +
xlab("Tempo (s)") +
ylab("EMG1 simulado")
ggplot_1
library(pracma)
library(tidyverse)
# Frequência de amostragem
fs2 <- 300
dt2 <- 1/fs2
# Vetor de tempo "t"
t2 <- seq(from = 0, to = 30, by = dt2)
# Média desejada
media2 <- 1.8
# Desvio padrão desejado
desvio_padrao2 <- 0.9
# Numero de amostrar
amostras2 <- fs2 * t2
# Calculando amplitudes do EMG1 com base na funcao randn()
amplitudes2_ <- randn(n = length(t2), m = 1)
amplitudes_EMG2 <- media2 + desvio_padrao2 * amplitudes2_
# Criando um dataframe para o sinal EMG1
df_EMG2 <- data.frame(Amplitudes = amplitudes_EMG2, t = t2)
# Plotando o sinal EMG1 com o ggplot
ggplot_2 <- ggplot2::ggplot(df_EMG2, aes (x = t, y = Amplitudes)) +
geom_line() +
xlab("Tempo (s)") +
ylab("EMG1 simulado")
ggplot_2
TempoC <- t2
AmplitudeC <- amplitudes_EMG2
tempo_discreto_desejado <- t
# Criacao do DataFrame contendo a interpolação
df_c <- data.frame(spline(x = TempoC,
y = AmplitudeC,
xout = tempo_discreto_desejado))
amplitude_interpolado <- df_c$y
tempo_do_sinal_interpolado <- df_c$x
# Calcula as amplitudes do EMG3
amplitudes_EMG3 <- amplitudes_EMG1 + amplitude_interpolado
# Criando o DataFrame para o EMG3
df_EMG3 <- data.frame(Amplitudes = amplitudes_EMG3, t = t)
# Cria o ggplot para o EMG3
ggplot3 <- ggplot2::ggplot(df_EMG3, aes (x = t, y = Amplitudes)) +
geom_line() + xlab("Tempo (s)") +
ylab("EMG3 simulado")
# Plota o grafico utilizando o ggplot
ggplot3
library(patchwork)
# Boxplot EMG1
boxplot_EMG1 <- ggplot(df_EMG1, aes(x = factor("EMG1"), y = Amplitudes)) +
geom_boxplot() +
labs(x = "", y = "Amplitude")
# Histograma EMG1
histograma_EMG1 <- ggplot(df_EMG1, aes(x = Amplitudes)) +
geom_histogram(binwidth = 0.5, fill = "orange", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Frequencia")
# Densidade EMG1
densidade_EMG1 <- ggplot(df_EMG1, aes(x = Amplitudes)) +
geom_density(fill = "orange", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Densidade")
# Boxplot EMG2
boxplot_EMG2 <- ggplot(df_EMG2, aes(x = factor("EMG2"), y = Amplitudes)) +
geom_boxplot() +
labs(x = "", y = "Amplitude")
# Histograma EMG2
histograma_EMG2 <- ggplot(df_EMG2, aes(x = Amplitudes)) +
geom_histogram(binwidth = 0.5, fill = "red", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Frequencia")
# Densidade EMG2
densidade_EMG2 <- ggplot(df_EMG2, aes(x = Amplitudes)) +
geom_density(fill = "red", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Densidade")
# Boxplot EMG3
boxplot_EMG3 <- ggplot(df_EMG3, aes(x = factor("EMG3"), y = Amplitudes)) +
geom_boxplot() +
labs(x = "", y = "Amplitude")
# Histograma EMG3
histograma_EMG3 <- ggplot(df_EMG3, aes(x = Amplitudes)) +
geom_histogram(binwidth = 0.5, fill = "green", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Frequencia")
# Densidade EMG3
densidade_EMG3 <- ggplot(df_EMG3, aes(x = Amplitudes)) +
geom_density(fill = "green", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Densidade")
# Mostrando a tabela
(boxplot_EMG1 | histograma_EMG1 | densidade_EMG1) /
(boxplot_EMG2 | histograma_EMG2 | densidade_EMG2) /
(boxplot_EMG3 | histograma_EMG3 | densidade_EMG3)
library(kableExtra)
library(e1071)
library(dplyr)
# Calculando a media com a funcao mean()
media_EMG1 <- mean(df_EMG1$Amplitudes)
media_EMG2 <- mean(df_EMG2$Amplitudes)
media_EMG3 <- mean(df_EMG3$Amplitudes)
# Arredondando o resultado para 3 casas decimais
media_EMG1_3 <- round(media_EMG1, 3)
media_EMG2_3 <- round(media_EMG2, 3)
media_EMG3_3 <- round(media_EMG3, 3)
# Calculando o desvio padrao
dp_EMG1 <- sd(df_EMG1$Amplitudes)
dp_EMG2 <- sd(df_EMG2$Amplitudes)
dp_EMG3 <- sd(df_EMG3$Amplitudes)
# Arrendondando o resultado para 3 casas decimais
dp_EMG1_3 <- round(dp_EMG1, 3)
dp_EMG2_3 <- round(dp_EMG2, 3)
dp_EMG3_3 <- round(dp_EMG3, 3)
# Calculando a variancia
v_EMG1 <- var(df_EMG1$Amplitudes)
v_EMG2 <- var(df_EMG2$Amplitudes)
v_EMG3 <- var(df_EMG3$Amplitudes)
# Arredondando resultado para 3 casas decimais
v_EMG1_3 <- round(v_EMG1, 3)
v_EMG2_3 <- round(v_EMG2, 3)
v_EMG3_3 <- round(v_EMG3, 3)
# Calculando o coeficiente de assimetria
coefassim_EMG1 <- skewness(df_EMG1$Amplitudes)
coefassim_EMG2 <- skewness(df_EMG2$Amplitudes)
coefassim_EMG3 <- skewness(df_EMG3$Amplitudes)
# Arredondando resultado para 3 casas decimais
coefassim_EMG1_3 <- round(coefassim_EMG1, 3)
coefassim_EMG2_3 <- round(coefassim_EMG2, 3)
coefassim_EMG3_3 <- round(coefassim_EMG3, 3)
# Calculando o curtose
curt_EMG1 <- kurtosis(df_EMG1$Amplitudes)
curt_EMG2 <- kurtosis(df_EMG2$Amplitudes)
curt_EMG3 <- kurtosis(df_EMG3$Amplitudes)
# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
# Criando um dataframe
df <- data.frame( sinais = c("EMG1", "EMG2", "EMG3"),
mean = c(media_EMG1_3, media_EMG2_3, media_EMG3_3),
dp = c(dp_EMG1_3, dp_EMG2_3, dp_EMG3_3),
var = c(v_EMG1_3, v_EMG2_3, v_EMG3_3),
ca = c(coefassim_EMG1_3, coefassim_EMG2_3, coefassim_EMG3_3),
curtose = c(curt_EMG1_3, curt_EMG2_3, curt_EMG3_3))
df %>% kbl() %>% kable_styling()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("pink", "orange", "gray", "yellow")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("C:/Users/heito/Desktop/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from=0, to = dt*(length(dadosm4$AccY)-1), by = dt)
dadosm4 <- cbind(time = t, dadosm4)
# Plotagem do gráfico
dygraph(dadosm4[c("time", "AccY")], main = "AccY", group = "GroupName") %>%
dyRangeSelector()
# Amplitude Máxima
AmpMAX_AccY <- max(dadosm4$AccY) - min(dadosm4$AccY)
lim_min <- 0.9 * AmpMAX_AccY
# Encontrando os picos e armazenando os valores
dadosm4 <- dadosm4 %>%
mutate(pico = ifelse(dadosm4$AccY - min(dadosm4$AccY) >= lim_min, dadosm4$AccY, NA))
# Plotagem do gráfico
ggplot(dadosm4, aes(x = time, y = pico)) +
geom_line(na.rm = TRUE) +
labs(title = "Amplitudes de AccY >= 90% da Max. Amplitude",
x = "Tempo",
y = "AccY")
# Cálculo dos parâmetros
x <- dadosm4$MuscPosterior  # Definição da variável correta
# Tamanho da janela
janela <- 500
# Índice dos picos encontrados
indice_picos <- which(!is.na(dadosm4$pico))
# Criando um data frame vazio para armazenar os resultados
df <- data.frame()
# Loop para percorrer os picos
for (i in indice_picos){
indx1 <- i - floor(janela / 2)
indx2 <- i + ceiling(janela / 2) - 1
# Cálculo dos valores desejados
if(indx1 > 0 & indx2 <= length(x)) {
media <- mean(x[indx1:indx2])
mediana <- median(x[indx1:indx2])
moda <- as.numeric(names(table(x[indx1:indx2]))[which.max(table(x[indx1:indx2]))])
amplitude <- max(x[indx1:indx2]) - min(x[indx1:indx2])
variancia <- var(x[indx1:indx2])
cv <- sd(x[indx1:indx2]) / mean(x[indx1:indx2])
iqr <- IQR(x[indx1:indx2])
# Armazenando os resultados no data frame
df <- rbind(df, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo o data frame com os resultados
df
# Seleção do sinal de interesse
y <- dadosm4$MuscPosterior
# Definição do tamanho da janela (número de amostras)
Nwnd <- 500
# Gerando os índices iniciais de cada janela
indx1 <- seq(from = 1, to = length(y), by = Nwnd)
N <- length(indx1)  # Número de janelas
# Inicializando um data frame para armazenar os resultados
dfenv <- data.frame(
time = rep(NA, times = N - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(N - 1)) {
# Calcula o tempo centralizado em cada janela
dfenv$time[i] <- (indx1[i] + (indx1[i + 1] - indx1[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
dfenv$mediana[i] <- median(y[indx1[i]:indx1[i + 1]])
}
# Plotando os resultados
dygraph(dfenv, main = "Mediana x Tempo", group = "GroupName") %>%
dyRangeSelector()
