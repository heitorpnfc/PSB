# Calculando o coeficiente de assimetria
coefassim_EMG1 <- skewness(dados_EMG1$Amplitude)
coefassim_EMG2 <- skewness(dados_EMG2$Amplitude)
coefassim_EMG3 <- skewness(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
coefassim_EMG1_3 <- round(coefassim_EMG1, 3)
coefassim_EMG2_3 <- round(coefassim_EMG2, 3)
coefassim_EMG3_3 <- round(coefassim_EMG3, 3)
# Calculando a curtose
curt_EMG1 <- kurtosis(dados_EMG1$Amplitude)
curt_EMG2 <- kurtosis(dados_EMG2$Amplitude)
curt_EMG3 <- kurtosis(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
dados_EMG1$Amplitudes
dados_EMG1$Amplitude
library(kableExtra)
library(e1071)
library(dplyr)
# Calculando a média com a função mean()
media_EMG1 <- mean(dados_EMG1$Amplitude)
media_EMG2 <- mean(dados_EMG2$Amplitude)
media_EMG3 <- mean(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
media_EMG1_3 <- round(media_EMG1, 3)
media_EMG2_3 <- round(media_EMG2, 3)
media_EMG3_3 <- round(media_EMG3, 3)
# Calculando o desvio padrão
dp_EMG1 <- sd(dados_EMG1$Amplitude)
dp_EMG2 <- sd(dados_EMG2$Amplitude)
dp_EMG3 <- sd(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
dp_EMG1_3 <- round(dp_EMG1, 3)
dp_EMG2_3 <- round(dp_EMG2, 3)
dp_EMG3_3 <- round(dp_EMG3, 3)
# Calculando a variância
v_EMG1 <- var(dados_EMG1$Amplitude)
v_EMG2 <- var(dados_EMG2$Amplitude)
v_EMG3 <- var(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
v_EMG1_3 <- round(v_EMG1, 3)
v_EMG2_3 <- round(v_EMG2, 3)
v_EMG3_3 <- round(v_EMG3, 3)
# Calculando o coeficiente de assimetria
coefassim_EMG1 <- skewness(dados_EMG1$Amplitude)
coefassim_EMG2 <- skewness(dados_EMG2$Amplitude)
coefassim_EMG3 <- skewness(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
coefassim_EMG1_3 <- round(coefassim_EMG1, 3)
coefassim_EMG2_3 <- round(coefassim_EMG2, 3)
coefassim_EMG3_3 <- round(coefassim_EMG3, 3)
# Calculando a curtose
curt_EMG1 <- kurtosis(dados_EMG1$Amplitude)
curt_EMG2 <- kurtosis(dados_EMG2$Amplitude)
curt_EMG3 <- kurtosis(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
# Criando um dataframe com os resultados
df <- data.frame(sinais = c("EMG1", "EMG2", "EMG3"),
mean = c(media_EMG1_3, media_EMG2_3, media_EMG3_3),
dp = c(dp_EMG1_3, dp_EMG2_3, dp_EMG3_3),
var = c(v_EMG1_3, v_EMG2_3, v_EMG3_3),
ca = c(coefassim_EMG1_3, coefassim_EMG2_3, coefassim_EMG3_3),
curtose = c(curt_EMG1_3, curt_EMG2_3, curt_EMG3_3))
# Exibindo o dataframe formatado com kableExtra
df %>% kbl() %>% kable_styling()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red",
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red",
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("pink", "orange", "gray", "yellow")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
# Carregar as bibliotecas necessárias
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector()
library(dygraphs)
library(tidyverse)
dadosm4 <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep =  " ", skip = 6)
# Alterando o nome das variávesi do df
names(dadosm4) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Criando vetor tempo
fs <- 500
# Definindo intervalo entre amostrar
dt <- 1/fs
# Definindo vetor tempo (s)
t <- seq(from=0, to = dt*(length(dadosm4$AccY)-1), by = dt)
dadosm4 <- cbind(time = t, dadosm4)
# Plotagem do gráfico
dygraph(dadosm4[c("time", "AccY")], main = "AccY", group = "GroupName") %>%
dyRangeSelector()
# Carregar as bibliotecas necessárias
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector()
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector()
# Amplitude Máxima
AmpMAX_AccY <- max(dados$AccY) - min(dados$AccY)
lim_min <- 0.9 * AmpMAX_AccY
# Encontrando os picos e armazenando os valores
dados <- dados %>%
mutate(pico = ifelse(dados$AccY - min(dados$AccY) >= lim_min, dados$AccY, NA))
# Plotando o gráfico com os picos encontrados
ggplot(dados, aes(x = time, y = pico)) +
geom_line(na.rm = TRUE) +
labs(title = "Picos de AccY com Amplitude >= 90% da Amplitude Máxima", x = "Tempo (s)", y = "AccY")
# Selecionando o sinal do músculo tibial anterior (MuscAnterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela de 500 ms
janela <- 500
# Localizando os índices dos picos
picos_indice <- which(!is.na(dados$pico))
# Criando um data frame para armazenar os resultados
resultados <- data.frame()
# Loop para calcular as estatísticas para cada janela
for (i in picos_indice) {
# Determinando os índices de início e fim da janela
indx_inicio <- i - floor(janela / 2)
indx_fim <- i + ceiling(janela / 2) - 1
# Verificando se a janela está dentro dos limites dos dados
if (indx_inicio > 0 & indx_fim <= length(sinal)) {
# Calculando as estatísticas para a janela
media <- mean(sinal[indx_inicio:indx_fim])
mediana <- median(sinal[indx_inicio:indx_fim])
moda <- as.numeric(names(table(sinal[indx_inicio:indx_fim]))[which.max(table(sinal[indx_inicio:indx_fim]))])
amplitude <- max(sinal[indx_inicio:indx_fim]) - min(sinal[indx_inicio:indx_fim])
variancia <- var(sinal[indx_inicio:indx_fim])
cv <- sd(sinal[indx_inicio:indx_fim]) / mean(sinal[indx_inicio:indx_fim])
iqr <- IQR(sinal[indx_inicio:indx_fim])
# Armazenando os resultados em um novo data frame
resultados <- rbind(resultados, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo os resultados
resultados
# Selecionando o sinal do músculo tibial anterior (MuscAnterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela de 500 ms
janela <- 500
# Localizando os índices dos picos
picos_indice <- which(!is.na(dados$pico))
# Criando um data frame para armazenar os resultados
resultados <- data.frame()
# Loop para calcular as estatísticas para cada janela
for (i in picos_indice) {
# Determinando os índices de início e fim da janela
indx_inicio <- i - floor(janela / 2)
indx_fim <- i + ceiling(janela / 2) - 1
# Verificando se a janela está dentro dos limites dos dados
if (indx_inicio > 0 & indx_fim <= length(sinal)) {
# Calculando as estatísticas para a janela
media <- mean(sinal[indx_inicio:indx_fim])
mediana <- median(sinal[indx_inicio:indx_fim])
moda <- as.numeric(names(table(sinal[indx_inicio:indx_fim]))[which.max(table(sinal[indx_inicio:indx_fim]))])
amplitude <- max(sinal[indx_inicio:indx_fim]) - min(sinal[indx_inicio:indx_fim])
variancia <- var(sinal[indx_inicio:indx_fim])
cv <- sd(sinal[indx_inicio:indx_fim]) / mean(sinal[indx_inicio:indx_fim])
iqr <- IQR(sinal[indx_inicio:indx_fim])
# Armazenando os resultados em um novo data frame
resultados <- rbind(resultados, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo os resultados
resultados
# Seleção do sinal de interesse (músculo posterior)
sinal <- dados$MuscPosterior
# Definindo o tamanho da janela (em número de amostras)
janela_size <- 500
# Gerando os índices iniciais de cada janela
inicio_janela <- seq(from = 1, to = length(sinal), by = janela_size)
num_janelas <- length(inicio_janela)  # Número de janelas
# Criando um data frame vazio para armazenar os resultados
mediana_resultados <- data.frame(
time = rep(NA, num_janelas - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(num_janelas - 1)) {
# Calcula o tempo centralizado para cada janela
mediana_resultados$time[i] <- (inicio_janela[i] + (inicio_janela[i + 1] - inicio_janela[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
mediana_resultados$mediana[i] <- median(sinal[inicio_janela[i]:inicio_janela[i + 1]])
}
# Plotando os resultados usando dygraphs
dygraph(mediana_resultados, main = "Variação da Mediana do Sinal Posterior ao Longo do Tempo", group = "MedianaTimeGroup") %>%
dyRangeSelector()
# Selecionando o sinal do músculo tibial anterior (MuscAnterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela de 500 ms
janela <- 500
# Localizando os índices dos picos
picos_indice <- which(!is.na(dados$pico))
# Criando um data frame para armazenar os resultados
resultados <- data.frame()
# Loop para calcular as estatísticas para cada janela
for (i in picos_indice) {
# Determinando os índices de início e fim da janela
indx_inicio <- i - floor(janela / 2)
indx_fim <- i + ceiling(janela / 2) - 1
# Verificando se a janela está dentro dos limites dos dados
if (indx_inicio > 0 & indx_fim <= length(sinal)) {
# Calculando as estatísticas para a janela
media <- mean(sinal[indx_inicio:indx_fim])
mediana <- median(sinal[indx_inicio:indx_fim])
moda <- as.numeric(names(table(sinal[indx_inicio:indx_fim]))[which.max(table(sinal[indx_inicio:indx_fim]))])
amplitude <- max(sinal[indx_inicio:indx_fim]) - min(sinal[indx_inicio:indx_fim])
variancia <- var(sinal[indx_inicio:indx_fim])
cv <- sd(sinal[indx_inicio:indx_fim]) / mean(sinal[indx_inicio:indx_fim])
iqr <- IQR(sinal[indx_inicio:indx_fim])
# Armazenando os resultados em um novo data frame
resultados <- rbind(resultados, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo os resultados
resultados
# Cálculo dos parâmetros
x <- dadosm4$MuscPosterior  # Definição da variável correta
# Tamanho da janela
janela <- 500
# Índice dos picos encontrados
indice_picos <- which(!is.na(dadosm4$pico))
# Criando um data frame vazio para armazenar os resultados
df <- data.frame()
# Loop para percorrer os picos
for (i in indice_picos){
indx1 <- i - floor(janela / 2)
indx2 <- i + ceiling(janela / 2) - 1
# Cálculo dos valores desejados
if(indx1 > 0 & indx2 <= length(x)) {
media <- mean(x[indx1:indx2])
mediana <- median(x[indx1:indx2])
moda <- as.numeric(names(table(x[indx1:indx2]))[which.max(table(x[indx1:indx2]))])
amplitude <- max(x[indx1:indx2]) - min(x[indx1:indx2])
variancia <- var(x[indx1:indx2])
cv <- sd(x[indx1:indx2]) / mean(x[indx1:indx2])
iqr <- IQR(x[indx1:indx2])
# Armazenando os resultados no data frame
df <- rbind(df, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo o data frame com os resultados
df
# Seleção do sinal de interesse
y <- dadosm4$MuscPosterior
# Definição do tamanho da janela (número de amostras)
Nwnd <- 500
# Gerando os índices iniciais de cada janela
indx1 <- seq(from = 1, to = length(y), by = Nwnd)
N <- length(indx1)  # Número de janelas
# Inicializando um data frame para armazenar os resultados
dfenv <- data.frame(
time = rep(NA, times = N - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(N - 1)) {
# Calcula o tempo centralizado em cada janela
dfenv$time[i] <- (indx1[i] + (indx1[i + 1] - indx1[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
dfenv$mediana[i] <- median(y[indx1[i]:indx1[i + 1]])
}
# Plotando os resultados
dygraph(dfenv, main = "Mediana x Tempo", group = "GroupName") %>%
dyRangeSelector()
# Seleção do sinal de interesse (músculo posterior)
sinal <- dadosm4$MuscPosterior
# Definindo o tamanho da janela (em número de amostras)
janela_size <- 500
# Gerando os índices iniciais de cada janela
inicio_janela <- seq(from = 1, to = length(sinal), by = janela_size)
num_janelas <- length(inicio_janela)  # Número de janelas
# Criando um data frame vazio para armazenar os resultados
mediana_resultados <- data.frame(
time = rep(NA, num_janelas - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(num_janelas - 1)) {
# Calcula o tempo centralizado para cada janela
mediana_resultados$time[i] <- (inicio_janela[i] + (inicio_janela[i + 1] - inicio_janela[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
mediana_resultados$mediana[i] <- median(sinal[inicio_janela[i]:inicio_janela[i + 1]])
}
# Plotando os resultados usando dygraphs
dygraph(mediana_resultados, main = "Variação da Mediana do Sinal Posterior ao Longo do Tempo", group = "MedianaTimeGroup") %>%
dyRangeSelector()
# Selecionando o sinal do músculo tibial anterior (MuscAnterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela de 500 ms
janela <- 500
# Localizando os índices dos picos
picos_indice <- which(!is.na(dados$pico))
# Criando um data frame para armazenar os resultados
resultados <- data.frame()
# Loop para calcular as estatísticas para cada janela
for (i in picos_indice) {
# Determinando os índices de início e fim da janela
indx_inicio <- i - floor(janela / 2)
indx_fim <- i + ceiling(janela / 2) - 1
# Verificando se a janela está dentro dos limites dos dados
if (indx_inicio > 0 & indx_fim <= length(sinal)) {
# Calculando as estatísticas para a janela
media <- mean(sinal[indx_inicio:indx_fim])
mediana <- median(sinal[indx_inicio:indx_fim])
moda <- as.numeric(names(table(sinal[indx_inicio:indx_fim]))[which.max(table(sinal[indx_inicio:indx_fim]))])
amplitude <- max(sinal[indx_inicio:indx_fim]) - min(sinal[indx_inicio:indx_fim])
variancia <- var(sinal[indx_inicio:indx_fim])
cv <- sd(sinal[indx_inicio:indx_fim]) / mean(sinal[indx_inicio:indx_fim])
iqr <- IQR(sinal[indx_inicio:indx_fim])
# Armazenando os resultados em um novo data frame
resultados <- rbind(resultados, data.frame(pico = i, media = media, mediana = mediana, moda = moda,
amplitude = amplitude, variancia = variancia, cv = cv, iqr = iqr))
}
}
# Exibindo os resultados
resultados
# Calcular a amplitude máxima de AccY
AmpMAX_AccY <- max(dados$AccY) - min(dados$AccY)
# Definir o limite mínimo de amplitude (90% da amplitude máxima)
lim_min <- 0.9 * AmpMAX_AccY
# Identificar os picos no sinal
dados <- dados %>%
mutate(pico = ifelse(AccY - min(AccY) >= lim_min, AccY, NA))
# Plotando o gráfico com os picos encontrados
ggplot(dados, aes(x = time, y = pico)) +
geom_line(na.rm = TRUE) +
labs(title = "Picos de AccY com Amplitude >= 90% da Amplitude Máxima", x = "Tempo (s)", y = "AccY")
# Plotando o gráfico com os picos encontrados
ggplot(dados, aes(x = time, y = pico)) +
geom_line(na.rm = TRUE) +
labs(title = "Picos de AccY com Amplitude >= 90% da Amplitude Máxima", x = "Tempo (s)", y = "AccY")
# Seleção do sinal de interesse (músculo posterior)
sinal <- dados$MuscPosterior
# Definindo o tamanho da janela (em número de amostras)
janela_size <- 500
# Gerando os índices iniciais de cada janela
inicio_janela <- seq(from = 1, to = length(sinal), by = janela_size)
num_janelas <- length(inicio_janela)  # Número de janelas
# Criando um data frame vazio para armazenar os resultados
mediana_resultados <- data.frame(
time = rep(NA, num_janelas - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(num_janelas - 1)) {
# Calcula o tempo centralizado para cada janela
mediana_resultados$time[i] <- (inicio_janela[i] + (inicio_janela[i + 1] - inicio_janela[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
mediana_resultados$mediana[i] <- median(sinal[inicio_janela[i]:inicio_janela[i + 1]])
}
# Plotando os resultados usando dygraphs
dygraph(mediana_resultados, main = "Variação da Mediana do Sinal Posterior ao Longo do Tempo", group = "MedianaTimeGroup") %>%
dyRangeSelector()
