# Histograma do sinal EMG1
hist_emg1 <- ggplot(dados_EMG1, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG1
densid_emg1 <- ggplot(dados_EMG1, aes(x = Amplitude)) +
geom_density(fill = "blue", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Boxplot do sinal EMG2
box_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_boxplot() +
labs(x = "EMG2", y = "Amplitude") +
theme_minimal()
# Histograma do sinal EMG2
hist_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "purple", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG2
densid_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_density(fill = "purple", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Boxplot do sinal EMG3
box_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_boxplot() +
labs(x = "EMG3", y = "Amplitude") +
theme_minimal()
# Histograma do sinal EMG3
hist_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "pink", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG3
densid_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_density(fill = "pink", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Combinando os gráficos em um painel
(box_emg1 | hist_emg1 | densid_emg1) /
(box_emg2 | hist_emg2 | densid_emg2) /
(box_emg3 | hist_emg3 | densid_emg3)
library(kableExtra)
library(e1071)
library(dplyr)
# Calculando a média com a função mean()
media_EMG1 <- mean(dados_EMG1$Amplitude)
media_EMG2 <- mean(dados_EMG2$Amplitude)
media_EMG3 <- mean(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
media_EMG1_3 <- round(media_EMG1, 3)
media_EMG2_3 <- round(media_EMG2, 3)
media_EMG3_3 <- round(media_EMG3, 3)
# Calculando o desvio padrão
dp_EMG1 <- sd(dados_EMG1$Amplitude)
dp_EMG2 <- sd(dados_EMG2$Amplitude)
dp_EMG3 <- sd(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
dp_EMG1_3 <- round(dp_EMG1, 3)
dp_EMG2_3 <- round(dp_EMG2, 3)
dp_EMG3_3 <- round(dp_EMG3, 3)
# Calculando a variância
v_EMG1 <- var(dados_EMG1$Amplitude)
v_EMG2 <- var(dados_EMG2$Amplitude)
v_EMG3 <- var(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
v_EMG1_3 <- round(v_EMG1, 3)
v_EMG2_3 <- round(v_EMG2, 3)
v_EMG3_3 <- round(v_EMG3, 3)
# Calculando o coeficiente de assimetria
coefassim_EMG1 <- skewness(dados_EMG1$Amplitude)
coefassim_EMG2 <- skewness(dados_EMG2$Amplitude)
coefassim_EMG3 <- skewness(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
coefassim_EMG1_3 <- round(coefassim_EMG1, 3)
coefassim_EMG2_3 <- round(coefassim_EMG2, 3)
coefassim_EMG3_3 <- round(coefassim_EMG3, 3)
# Calculando a curtose
curt_EMG1 <- kurtosis(dados_EMG1$Amplitude)
curt_EMG2 <- kurtosis(dados_EMG2$Amplitude)
curt_EMG3 <- kurtosis(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
# Criando um dataframe com os resultados
df <- data.frame(sinais = c("EMG1", "EMG2", "EMG3"),
mean = c(media_EMG1_3, media_EMG2_3, media_EMG3_3),
dp = c(dp_EMG1_3, dp_EMG2_3, dp_EMG3_3),
var = c(v_EMG1_3, v_EMG2_3, v_EMG3_3),
ca = c(coefassim_EMG1_3, coefassim_EMG2_3, coefassim_EMG3_3),
curtose = c(curt_EMG1_3, curt_EMG2_3, curt_EMG3_3))
# Exibindo o dataframe formatado com kableExtra
df %>% kbl() %>% kable_styling()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("pink", "orange", "gray", "yellow")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(pracma)
library(ggplot2)
library(dplyr)
fs1 <- 1000
dt1 <- 1/fs1
tempo <- seq(0, 30, by = dt1)
media1 <- 0.8
desvio_padrao1 <- 1.3
# Gerando ruído com distribuição normal
ruido1 <- randn(length(tempo), 1)
EMG1 <- media1 + desvio_padrao1 * ruido1
dados_EMG1 <- data.frame(Tempo = tempo, Amplitude = EMG1)
grafico_EMG1 <- ggplot(dados_EMG1, aes(x = Tempo, y = Amplitude)) +
geom_line(color = "grey") +
labs(x = "Tempo (s)", y = "Amplitude do EMG1") +
theme_minimal()
# Exibe o gráfico do EMG1
grafico_EMG1
library(pracma)
library(tidyverse)
fs2 <- 300
dt2 <- 1/fs2
tempo2 <- seq(0, 30, by = dt2)
media2 <- 1.8
desvio_padrao2 <- 0.9
# Gerando ruído para o EMG2
ruido2 <- randn(length(tempo2), 1)
EMG2 <- media2 + desvio_padrao2 * ruido2
dados_EMG2 <- data.frame(Tempo = tempo2, Amplitude = EMG2)
grafico_EMG2 <- ggplot(dados_EMG2, aes(x = Tempo, y = Amplitude)) +
geom_line(color = "black") +
labs(x = "Tempo (s)", y = "Amplitude do EMG2") +
theme_minimal()
# Exibe o gráfico do EMG2
grafico_EMG2
# Realizando interpolação para EMG2
df_c <- data.frame(spline(x = tempo2, y = EMG2, xout = tempo))
amplitude_interpolado <- df_c$y
# Calculando o EMG3
EMG3 <- EMG1 + amplitude_interpolado
dados_EMG3 <- data.frame(Tempo = tempo, Amplitude = EMG3)
grafico_EMG3 <- ggplot(dados_EMG3, aes(x = Tempo, y = Amplitude)) +
geom_line(color = "brown") +
labs(x = "Tempo (s)", y = "Amplitude do EMG3") +
theme_minimal()
# Exibe o gráfico do EMG3
grafico_EMG3
library(ggplot2)
library(patchwork)
# Boxplot do sinal EMG1
box_emg1 <- ggplot(dados_EMG1, aes(x = Amplitude)) +
geom_boxplot() +
labs(x = "EMG1", y = "Amplitude") +
theme_minimal()
# Histograma do sinal EMG1
hist_emg1 <- ggplot(dados_EMG1, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG1
densid_emg1 <- ggplot(dados_EMG1, aes(x = Amplitude)) +
geom_density(fill = "blue", color = "black") +
labs(title = "EMG1", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Boxplot do sinal EMG2
box_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_boxplot() +
labs(x = "EMG2", y = "Amplitude") +
theme_minimal()
# Histograma do sinal EMG2
hist_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "purple", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG2
densid_emg2 <- ggplot(dados_EMG2, aes(x = Amplitude)) +
geom_density(fill = "purple", color = "black") +
labs(title = "EMG2", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Boxplot do sinal EMG3
box_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_boxplot() +
labs(x = "EMG3", y = "Amplitude") +
theme_minimal()
# Histograma do sinal EMG3
hist_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_histogram(binwidth = 0.5, fill = "pink", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Frequência") +
theme_minimal()
# Densidade do sinal EMG3
densid_emg3 <- ggplot(dados_EMG3, aes(x = Amplitude)) +
geom_density(fill = "pink", color = "black") +
labs(title = "EMG3", x = "Amplitude", y = "Densidade") +
theme_minimal()
# Combinando os gráficos em um painel
(box_emg1 | hist_emg1 | densid_emg1) /
(box_emg2 | hist_emg2 | densid_emg2) /
(box_emg3 | hist_emg3 | densid_emg3)
library(kableExtra)
library(e1071)
library(dplyr)
# Calculando a média com a função mean()
media_EMG1 <- mean(dados_EMG1$Amplitude)
media_EMG2 <- mean(dados_EMG2$Amplitude)
media_EMG3 <- mean(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
media_EMG1_3 <- round(media_EMG1, 3)
media_EMG2_3 <- round(media_EMG2, 3)
media_EMG3_3 <- round(media_EMG3, 3)
# Calculando o desvio padrão
dp_EMG1 <- sd(dados_EMG1$Amplitude)
dp_EMG2 <- sd(dados_EMG2$Amplitude)
dp_EMG3 <- sd(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
dp_EMG1_3 <- round(dp_EMG1, 3)
dp_EMG2_3 <- round(dp_EMG2, 3)
dp_EMG3_3 <- round(dp_EMG3, 3)
# Calculando a variância
v_EMG1 <- var(dados_EMG1$Amplitude)
v_EMG2 <- var(dados_EMG2$Amplitude)
v_EMG3 <- var(dados_EMG3$Amplitude)
# Arredondando o resultado para 3 casas decimais
v_EMG1_3 <- round(v_EMG1, 3)
v_EMG2_3 <- round(v_EMG2, 3)
v_EMG3_3 <- round(v_EMG3, 3)
# Calculando o coeficiente de assimetria
coefassim_EMG1 <- skewness(dados_EMG1$Amplitude)
coefassim_EMG2 <- skewness(dados_EMG2$Amplitude)
coefassim_EMG3 <- skewness(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
coefassim_EMG1_3 <- round(coefassim_EMG1, 3)
coefassim_EMG2_3 <- round(coefassim_EMG2, 3)
coefassim_EMG3_3 <- round(coefassim_EMG3, 3)
# Calculando a curtose
curt_EMG1 <- kurtosis(dados_EMG1$Amplitude)
curt_EMG2 <- kurtosis(dados_EMG2$Amplitude)
curt_EMG3 <- kurtosis(dados_EMG3$Amplitude)
# Arredondando resultado para 3 casas decimais
curt_EMG1_3 <- round(curt_EMG1, 3)
curt_EMG2_3 <- round(curt_EMG2, 3)
curt_EMG3_3 <- round(curt_EMG3, 3)
# Criando um dataframe com os resultados
df <- data.frame(sinais = c("EMG1", "EMG2", "EMG3"),
mean = c(media_EMG1_3, media_EMG2_3, media_EMG3_3),
dp = c(dp_EMG1_3, dp_EMG2_3, dp_EMG3_3),
var = c(v_EMG1_3, v_EMG2_3, v_EMG3_3),
ca = c(coefassim_EMG1_3, coefassim_EMG2_3, coefassim_EMG3_3),
curtose = c(curt_EMG1_3, curt_EMG2_3, curt_EMG3_3))
# Exibindo o dataframe formatado com kableExtra
df %>% kbl() %>% kable_styling()
library(tidyverse)
# Amplitudes do Sinal (1) - Alta precisão e alta exatidão
temp1 <- rnorm(1000, mean = 25, sd = 0.5)
temp1 <- pmax(pmin(temp1, 30), 20)
# Amplitudes do Sinal (2) - Baixa precisão e alta exatidão
temp2 <- runif(1000, min = 22, max = 28)
temp2 <- pmax(pmin(temp2, 30), 20)
# Amplitudes do Sinal (3) - Alta precisão e baixa exatidão
temp3 <- rnorm(1000, mean = 23, sd = 0.5)
temp3 <- pmax(pmin(temp3, 30), 20)
# Amplitudes do Sinal (4) - Baixa precisão e baixa exatidão
temp4 <- runif(1000, min = 20, max = 30)
temp4 <- pmax(pmin(temp4, 30), 20)
# Criando vetor de tempo
t <- rep(1:1000, 4)
# Criando data frames para os sinais
df1 <- data.frame(temperatura = temp1, t = t, group = 'Alta precisão e alta exatidão')
df2 <- data.frame(temperatura = temp2, t = t, group = 'Baixa precisão e alta exatidão')
df3 <- data.frame(temperatura = temp3, t = t, group = 'Alta precisão e baixa exatidão')
df4 <- data.frame(temperatura = temp4, t = t, group = 'Baixa precisão e baixa exatidão')
# Unindo os data frames
df <- rbind(df1, df2, df3, df4)
# Plotando os sinais ao longo do tempo
ggplot(df, aes(x = t, y = temperatura, color = group)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple")) +
facet_wrap(~ group, ncol = 1, scales = "free_y") +
xlab("Tempo") +
ylab("Temperatura (°C)") +
theme_minimal()
# Plotando as distribuições das temperaturas
ggplot(df, aes(x = temperatura, fill = group)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("pink", "orange", "gray", "yellow")) +
xlab("Temperatura (°C)") +
ylab("Densidade") +
theme_classic()
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 0.9 * max(dados$AccY, na.rm = TRUE)
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 2550
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 2520
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 2530
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 2530
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 2520
# Plotando o gráfico de AccY
dygraph(dados[c("time", "AccY")], main = "Aceleração no Eixo Y (AccY)", group = "AccYGroup") %>%
dyRangeSelector() %>%
dyLimit(limite_90, color = "red", label = "90% Máx")
unlink("Modulo4_cache", recursive = TRUE)
library(dygraphs)
library(tidyverse)
# Carregar os dados a partir do arquivo de texto
dados <- read.table("E:/GitHub/PSB/Módulo 4 - PSB/DadosM4-1.txt", header = FALSE, sep = " ", skip = 6)
# Atribuindo nomes significativos às colunas
colnames(dados) <- c("AccX", "AccY", "MuscAnterior", "MuscPosterior")
# Definindo a frequência de amostragem e o intervalo de tempo
fs <- 500
dt <- 1 / fs
tempo <- seq(0, dt * (nrow(dados) - 1), by = dt)
# Adicionando o vetor de tempo ao data frame
dados <- cbind(time = tempo, dados)
limite_90 <- 0.9 * max(dados$AccY, na.rm = TRUE) * 1.1
# Plotando o gráfico de AccY
ggplot(dados, aes(x = time, y = AccY)) +
geom_line(color = "blue") +
geom_hline(yintercept = limite_90, color = "red", linetype = "dashed", size = 1) +
labs(title = "Aceleração no Eixo Y (AccY)",
x = "Tempo (s)",
y = "AccY") +
theme_minimal()
# Seleção do sinal de interesse (músculo posterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela (em número de amostras)
janela_size <- 500
# Gerando os índices iniciais de cada janela
inicio_janela <- seq(from = 1, to = length(sinal), by = janela_size)
num_janelas <- length(inicio_janela)  # Número de janelas
# Criando um data frame vazio para armazenar os resultados
mediana_resultados <- data.frame(
time = rep(NA, num_janelas - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(num_janelas - 1)) {
# Calcula o tempo centralizado para cada janela
mediana_resultados$time[i] <- (inicio_janela[i] + (inicio_janela[i + 1] - inicio_janela[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
mediana_resultados$mediana[i] <- median(sinal[inicio_janela[i]:inicio_janela[i + 1]])
}
# Plotando os resultados usando dygraphs
ggplot(mediana_resultados, aes(x = time, y = value)) +
geom_line(color = "blue") +
labs(title = "Variação da Mediana do Sinal Posterior ao Longo do Tempo",
x = "Tempo (s)",
y = "Mediana do Sinal Posterior") +
theme_minimal()
# Seleção do sinal de interesse (músculo posterior)
sinal <- dados$MuscAnterior
# Definindo o tamanho da janela (em número de amostras)
janela_size <- 500
# Gerando os índices iniciais de cada janela
inicio_janela <- seq(from = 1, to = length(sinal), by = janela_size)
num_janelas <- length(inicio_janela)  # Número de janelas
# Criando um data frame vazio para armazenar os resultados
mediana_resultados <- data.frame(
time = rep(NA, num_janelas - 1),
mediana = NA
)
# Loop para calcular a mediana em cada janela
for (i in 1:(num_janelas - 1)) {
# Calcula o tempo centralizado para cada janela
mediana_resultados$time[i] <- (inicio_janela[i] + (inicio_janela[i + 1] - inicio_janela[i]) / 2) * dt
# Calcula a mediana do sinal na janela atual
mediana_resultados$mediana[i] <- median(sinal[inicio_janela[i]:inicio_janela[i + 1]])
}
# Plotando os resultados usando dygraphs
ggplot(mediana_resultados, aes(x = time, y = mediana)) +
geom_line(color = "blue") +
labs(title = "Variação da Mediana do Sinal Posterior ao Longo do Tempo",
x = "Tempo (s)",
y = "Mediana do Sinal") +
theme_minimal()
