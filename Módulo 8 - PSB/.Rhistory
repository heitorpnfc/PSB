ruido_obj <- noise(kind = "white", duration = duracao, samp.rate = fs, xunit = "time")
ruido <- ruido_obj@left
ruido <- ruido[1:N]
# Escala o ruído para que seu valor máximo seja 10% do pico da senoide
# O pico da senoide (amplitude 1) é 1, então 10% = 0.1
ruido <- ruido / max(abs(ruido)) * 0.1
# Sinal corrompido
x_corrompido <- x_original + ruido
# Processador:
L <- 5
y_processado <- numeric(N)
for(n in 1:N) {
if(n == 1) {
y_prev <- 0
} else {
y_prev <- y_processado[n-1]
}
if((n-L) < 1) {
x_nmL <- 0
} else {
x_nmL <- x_corrompido[n-L]
}
y_processado[n] <- y_prev + (1/L)*x_corrompido[n] - x_nmL
}
# 5) Plot dos sinais
plot(t, x_original, type="l",
main="(A) Sinal Original (30 Hz, 5s, fs=500 Hz)",
xlab="Tempo (s)", ylab="Amplitude")
plot(t, x_corrompido, type="l",
main="(B) Sinal Corrompido (ruído branco até 10% de amplitude)",
xlab="Tempo (s)", ylab="Amplitude")
plot(t, y_processado, type="l",
main=paste("(C) Sinal Processado pelo Filtro (L =", L, ")"),
xlab="Tempo (s)", ylab="Amplitude")
# Vetor de frequências: -pi a +pi
N <- 1000
omega <- seq(-pi, pi, length.out = N)
# H(e^{jω}) = 0.5 + 0.5 e^{-jω}
H <- 0.5 + 0.5 * exp(-1i * omega)
# Módulo e fase (em radianos)
H_ampl <- Mod(H)
H_fase_rad <- Arg(H)
# Converte a fase para graus
H_fase_deg <- H_fase_rad * 180 / pi
# --- Plot da amplitude ---
plot(omega, H_ampl, type="l",
main="Resposta em Amplitude",
xlab=expression(omega), ylab="Amplitude")
# --- Plot da fase (em graus) ---
plot(omega, H_fase_deg, type="l",
main="Resposta em Fase",
xlab=expression(omega), ylab="Fase (graus)")
# Carregar bibliotecas necessárias
library(signal)
library(REdaS)
install.packages("REdaS")
# Carregar bibliotecas necessárias
library(signal)
library(REdaS)
library(ggplot2)
numerador <- c(0.5, 0.5)
denominador <- c(1)
taxa_amostragem <- 500
# Calcular a resposta em frequência do filtro
resposta_freq <- freqz(numerador, denominador, Fs = taxa_amostragem)
# Obter módulo da resposta em frequência
modulo <- Mod(resposta_freq$h)
# Calcular fase em radianos e converter para graus
fase_rad <- Arg(resposta_freq$h)
fase_graus <- rad2deg(fase_rad)
# Converter módulo para escala decibéis
modulo_db <- 20 * log10(modulo)
# Criar dataframe com os resultados para visualização
dados_plot <- data.frame(
frequencia = resposta_freq$f,
resposta_complexa = resposta_freq$h,
fase_rad,
fase_graus,
modulo,
modulo_db
)
# Gráfico do módulo
ggplot(dados_plot, aes(x = frequencia, y = modulo)) +
geom_line() +
theme_classic() +
labs(title = "Módulo da Resposta em Frequência", x = "Frequência (Hz)", y = "|H(f)|")
# Gráfico da fase em graus
ggplot(dados_plot, aes(x = frequencia, y = fase_graus)) +
geom_line() +
theme_classic() +
labs(title = "Fase da Resposta em Frequência", x = "Frequência (Hz)", y = "Fase (graus)")
# Gráfico do módulo em decibéis
ggplot(dados_plot, aes(x = frequencia, y = modulo_db)) +
geom_line() +
theme_classic() +
labs(title = "Resposta em Frequência (dB)", x = "Frequência (Hz)", y = "Magnitude (dB)")
# Geração do sinal de 10 segundos
library(signal)
fs <- 1000
duracao <- 10
N <- fs * duracao
t <- seq(0, by=1/fs, length.out = N)
# Gera ruído branco base (background do EMG)
emg <- rnorm(N, mean=0, sd=1)
# Define intervalos (em segundos) para cada burst:
# Exemplo: [1..3], [4..6], [7..9] -- total de 3 bursts
intervalos_burst <- list(c(1,3), c(4,6), c(7,9))
# Aplica ganho de 1.2 apenas nesses intervalos
for(intervalo in intervalos_burst) {
n_inicial <- floor(intervalo[1] * fs) + 1
n_final   <- floor(intervalo[2] * fs)
emg[n_inicial:n_final] <- 1.2 * emg[n_inicial:n_final]
}
# Sinal final simulado
x <- emg
# Projeto dos filtros passa-baixa
fc <- 5          # Hz
f_nyq <- fs / 2
Wn <- fc / f_nyq  # 5/500 = 0.01
ordem <- 3
# Filtro Butterworth
bf_butter <- butter(n = ordem, W = Wn, type = "low")
# Filtro Chebyshev
bf_cheby <- cheby1(n = ordem, Rp = 1, W = Wn, type = "low")
# Filtragem Butterworth
y_butter <- filtfilt(bf_butter, x)
# Filtragem Chebyshev
y_cheby  <- filtfilt(bf_cheby, x)
# Geração do sinal de 10 segundos
library(signal)
fs <- 1000
duracao <- 10
N <- fs * duracao
t <- seq(0, by=1/fs, length.out = N)
# Gera ruído branco base (background do EMG)
emg <- rnorm(N, mean=0, sd=1)
# Define intervalos (em segundos) para cada burst:
# Exemplo: [1..3], [4..6], [7..9] -- total de 3 bursts
intervalos_burst <- list(c(1,3), c(4,6), c(7,9))
# Aplica ganho de 1.2 apenas nesses intervalos
for(intervalo in intervalos_burst) {
n_inicial <- floor(intervalo[1] * fs) + 1
n_final   <- floor(intervalo[2] * fs)
emg[n_inicial:n_final] <- 1.2 * emg[n_inicial:n_final]
}
# Sinal final simulado
x <- emg
x
# Geração do sinal de 10 segundos
library(signal)
fs <- 1000
duracao <- 10
N <- fs * duracao
t <- seq(0, by=1/fs, length.out = N)
# Gera ruído branco base (background do EMG)
emg <- rnorm(N, mean=0, sd=1)
# Define intervalos (em segundos) para cada burst:
# Exemplo: [1..3], [4..6], [7..9] -- total de 3 bursts
intervalos_burst <- list(c(1,3), c(4,6), c(7,9))
# Aplica ganho de 1.2 apenas nesses intervalos
for(intervalo in intervalos_burst) {
n_inicial <- floor(intervalo[1] * fs) + 1
n_final   <- floor(intervalo[2] * fs)
emg[n_inicial:n_final] <- 1.2 * emg[n_inicial:n_final]
}
# Sinal final simulado
x <- emg
# Projeto dos filtros passa-baixa
fc <- 5          # Hz
f_nyq <- fs / 2
Wn <- fc / f_nyq  # 5/500 = 0.01
ordem <- 3
# Filtro Butterworth
bf_butter <- butter(n = ordem, W = Wn, type = "low")
# Filtro Chebyshev
bf_cheby <- cheby1(n = ordem, Rp = 1, W = Wn, type = "low")
# Filtragem Butterworth
y_butter <- filtfilt(bf_butter, x)
# Filtragem Chebyshev
y_cheby  <- filtfilt(bf_cheby, x)
# Plotagem
plot(t, x, type="l",
main="Sinal EMG simulado com 3 bursts (ganho=1.2)",
xlab="Tempo (s)", ylab="Amplitude")
plot(t, y_butter, type="l",
main="EMG Filtrado (Butterworth, fc=5Hz, ordem=3)",
xlab="Tempo (s)", ylab="Amplitude")
plot(t, y_cheby, type="l",
main="EMG Filtrado (Chebyshev, fc=5Hz, ordem=3, ripple = 1dB)",
xlab="Tempo (s)", ylab="Amplitude")
# Carregamento das bibliotecas
library(pracma)
library(signal)
library(ggplot2)
library(dplyr)
# Configurações iniciais
frequencia_amostragem <- 1000
intervalo_tempo <- 1 / frequencia_amostragem
tempo <- seq(from = 0, to = 10, by = intervalo_tempo)
# Geração de ruído branco (base do sinal)
sinal_base <- as.vector(randn(n = length(tempo), m = 1))
dados <- data.frame(tempo)
# Definição do burst do EMG
tempo_burst <- seq(from = 0, to = 2, by = intervalo_tempo)
constante <- 0.001
gerar_burst <- function(t) {
t * (2 - constante * t) * exp(-constante * t)
}
sinal_burst <- gerar_burst(1:10000)
# Interpolação para ajustar ao tempo
sinal_burst <- spline(x = 1:10000, y = sinal_burst, xout = 1:10000)$y
# Inserção dos bursts em 2s, 5s e 8s
pontos_insercao <- c((2/intervalo_tempo + 1), (5/intervalo_tempo + 1), (8/intervalo_tempo + 1))
dados$burst <- rep(NA, length(tempo))
for (i in 1:3) {
dados$burst[pontos_insercao[i]:(pontos_insercao[i] + length(sinal_burst) - 1)] <- sinal_burst
}
# Carregamento das bibliotecas
library(pracma)
library(signal)
library(ggplot2)
library(dplyr)
# Configurações iniciais
frequencia_amostragem <- 1000
intervalo_tempo <- 1 / frequencia_amostragem
tempo <- seq(from = 0, to = 10, by = intervalo_tempo)
# Geração de ruído branco (base do sinal)
sinal_base <- as.vector(randn(n = length(tempo), m = 1))
dados <- data.frame(tempo)
# Definição do burst do EMG
tempo_burst <- seq(from = 0, to = 2, by = intervalo_tempo)
constante <- 0.001
gerar_burst <- function(t) {
t * (2 - constante * t) * exp(-constante * t)
}
sinal_burst <- gerar_burst(1:10000)
# Interpolação para ajustar ao tempo
sinal_burst <- spline(x = 1:10000, y = sinal_burst, xout = 1:10000)$y
# Inserção dos bursts em 2s, 5s e 8s
pontos_insercao <- c((2/intervalo_tempo + 1), (5/intervalo_tempo + 1), (8/intervalo_tempo + 1))
dados$burst <- rep(NA, length(tempo))
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, length(tempo))  # evitar ultrapassar limites
comprimento <- fim - inicio + 1
dados$burst[inicio:fim] <- sinal_burst[1:comprimento]
}
# Visualização dos bursts
ggplot(dados) +
geom_line(aes(x = tempo, y = burst)) +
theme_bw(base_size = 20) +
labs(x = "Tempo (s)", y = "Amplitude dos Bursts")
# Soma do ruído com os bursts
dados <- dados %>%
mutate(
burst = ifelse(is.na(burst), 0, burst),
sinal_total = sinal_base + burst
)
# Amplificação dos trechos com burst
for (i in 1:3) {
idx <- pontos_insercao[i]:(pontos_insercao[i] + length(sinal_burst) - 1)
dados$sinal_total[idx] <- 1.2 * dados$sinal_total[idx]
}
# Carregamento das bibliotecas
library(pracma)
library(signal)
library(ggplot2)
library(dplyr)
# Configurações iniciais
frequencia_amostragem <- 1000
intervalo_tempo <- 1 / frequencia_amostragem
tempo <- seq(from = 0, to = 10, by = intervalo_tempo)
# Geração de ruído branco (base do sinal)
sinal_base <- as.vector(randn(n = length(tempo), m = 1))
dados <- data.frame(tempo)
# Definição do burst do EMG
tempo_burst <- seq(from = 0, to = 2, by = intervalo_tempo)
constante <- 0.001
gerar_burst <- function(t) {
t * (2 - constante * t) * exp(-constante * t)
}
sinal_burst <- gerar_burst(1:10000)
# Interpolação para ajustar ao tempo
sinal_burst <- spline(x = 1:10000, y = sinal_burst, xout = 1:10000)$y
# Inserção dos bursts em 2s, 5s e 8s
pontos_insercao <- c((2/intervalo_tempo + 1), (5/intervalo_tempo + 1), (8/intervalo_tempo + 1))
dados$burst <- rep(NA, length(tempo))
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, length(tempo))  # evitar ultrapassar limites
comprimento <- fim - inicio + 1
dados$burst[inicio:fim] <- sinal_burst[1:comprimento]
}
# Visualização dos bursts
ggplot(dados) +
geom_line(aes(x = tempo, y = burst)) +
theme_bw(base_size = 20) +
labs(x = "Tempo (s)", y = "Amplitude dos Bursts")
# Soma do ruído com os bursts
dados <- dados %>%
mutate(
burst = ifelse(is.na(burst), 0, burst),
sinal_total = sinal_base + burst
)
# Amplificação dos trechos com burst
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, nrow(dados))  # evita ultrapassar o limite do data.frame
dados$sinal_total[inicio:fim] <- 1.2 * dados$sinal_total[inicio:fim]
}
# Visualização do sinal completo com bursts amplificados
ggplot(dados) +
geom_line(aes(x = tempo, y = sinal_total)) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude com Amplificação")
# Criação do filtro Butterworth (ordem 3, 5 Hz)
ordem <- 3
frequencia_corte <- 5
frequencia_normalizada <- frequencia_corte / (frequencia_amostragem / 2)
filtro_butter <- butter(ordem, frequencia_normalizada, type = "low")
freqz(filt = filtro_butter, Fs = frequencia_amostragem)
# Criação do filtro Chebyshev Tipo I (ordem 3, 5 Hz, ripple 0.5 dB)
ripple <- 0.5
filtro_cheby <- cheby1(ordem, ripple, frequencia_normalizada, type = "low")
freqz(filt = filtro_cheby, Fs = frequencia_amostragem)
# Aplicação dos filtros
dados$sinal_butter <- filtfilt(filt = filtro_butter, dados$sinal_total)
dados$sinal_cheby <- filtfilt(filt = filtro_cheby, dados$sinal_total)
# Gráfico comparativo dos sinais
cores <- c("Original" = "black", "Butterworth" = "red", "Chebyshev" = "blue")
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
# Zoom no primeiro burst (0 a 3 segundos)
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
coord_cartesian(xlim = c(0, 3)) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
# Carregamento das bibliotecas
library(pracma)
library(signal)
library(ggplot2)
library(dplyr)
# Configurações iniciais
frequencia_amostragem <- 1000
intervalo_tempo <- 1 / frequencia_amostragem
tempo <- seq(from = 0, to = 10, by = intervalo_tempo)
# Geração de ruído branco (base do sinal)
sinal_base <- as.vector(randn(n = length(tempo), m = 1))
dados <- data.frame(tempo)
# Definição do burst do EMG
tempo_burst <- seq(from = 0, to = 2, by = intervalo_tempo)
constante <- 0.001
gerar_burst <- function(t) {
t * (2 - constante * t) * exp(-constante * t)
}
sinal_burst <- gerar_burst(1:10000)
# Interpolação para ajustar ao tempo
sinal_burst <- spline(x = 1:10000, y = sinal_burst, xout = 1:10000)$y
# Inserção dos bursts em 2s, 5s e 8s
pontos_insercao <- c((2/intervalo_tempo + 1), (5/intervalo_tempo + 1), (8/intervalo_tempo + 1))
dados$burst <- rep(NA, length(tempo))
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, length(tempo))  # evitar ultrapassar limites
comprimento <- fim - inicio + 1
dados$burst[inicio:fim] <- sinal_burst[1:comprimento]
}
# Visualização dos bursts
ggplot(dados) +
geom_line(aes(x = tempo, y = burst)) +
theme_bw(base_size = 20) +
labs(x = "Tempo (s)", y = "Amplitude dos Bursts")
# Soma do ruído com os bursts
dados <- dados %>%
mutate(
burst = ifelse(is.na(burst), 0, burst),
sinal_total = sinal_base + burst
)
# Amplificação dos trechos com burst
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, nrow(dados))  # evita ultrapassar o limite do data.frame
dados$sinal_total[inicio:fim] <- 1.2 * dados$sinal_total[inicio:fim]
}
# Visualização do sinal completo com bursts amplificados
ggplot(dados) +
geom_line(aes(x = tempo, y = sinal_total)) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude com Amplificação")
# Criação do filtro Butterworth (ordem 3, 5 Hz)
ordem <- 3
frequencia_corte <- 5
frequencia_normalizada <- frequencia_corte / (frequencia_amostragem / 2)
filtro_butter <- butter(ordem, frequencia_normalizada, type = "low")
freqz(filt = filtro_butter, Fs = frequencia_amostragem)
# Criação do filtro Chebyshev Tipo I (ordem 3, 5 Hz, ripple 0.5 dB)
ripple <- 0.5
filtro_cheby <- cheby1(ordem, ripple, frequencia_normalizada, type = "low")
freqz(filt = filtro_cheby, Fs = frequencia_amostragem)
# Aplicação dos filtros
dados$sinal_butter <- filtfilt(filt = filtro_butter, dados$sinal_total)
dados$sinal_cheby <- filtfilt(filt = filtro_cheby, dados$sinal_total)
# Gráfico comparativo dos sinais
cores <- c("Original" = "black", "Butterworth" = "darkorange", "Chebyshev" = "darkgreen")
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
# Zoom no primeiro burst (0 a 3 segundos)
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
coord_cartesian(xlim = c(0, 3)) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
# Carregamento das bibliotecas
library(pracma)
library(signal)
library(ggplot2)
library(dplyr)
# Configurações iniciais
frequencia_amostragem <- 1000
intervalo_tempo <- 1 / frequencia_amostragem
tempo <- seq(from = 0, to = 10, by = intervalo_tempo)
# Geração de ruído branco (base do sinal)
sinal_base <- as.vector(randn(n = length(tempo), m = 1))
dados <- data.frame(tempo)
# Definição do burst do EMG
tempo_burst <- seq(from = 0, to = 2, by = intervalo_tempo)
constante <- 0.001
gerar_burst <- function(t) {
t * (2 - constante * t) * exp(-constante * t)
}
sinal_burst <- gerar_burst(1:10000)
# Interpolação para ajustar ao tempo
sinal_burst <- spline(x = 1:10000, y = sinal_burst, xout = 1:10000)$y
# Inserção dos bursts em 2s, 5s e 8s
pontos_insercao <- c((2/intervalo_tempo + 1), (5/intervalo_tempo + 1), (8/intervalo_tempo + 1))
dados$burst <- rep(NA, length(tempo))
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, length(tempo))  # evitar ultrapassar limites
comprimento <- fim - inicio + 1
dados$burst[inicio:fim] <- sinal_burst[1:comprimento]
}
# Visualização dos bursts
ggplot(dados) +
geom_line(aes(x = tempo, y = burst)) +
theme_bw(base_size = 20) +
labs(x = "Tempo (s)", y = "Amplitude dos Bursts")
# Soma do ruído com os bursts
dados <- dados %>%
mutate(
burst = ifelse(is.na(burst), 0, burst),
sinal_total = sinal_base + burst
)
# Amplificação dos trechos com burst
for (i in 1:3) {
inicio <- pontos_insercao[i]
fim <- min(inicio + length(sinal_burst) - 1, nrow(dados))  # evita ultrapassar o limite do data.frame
dados$sinal_total[inicio:fim] <- 1.2 * dados$sinal_total[inicio:fim]
}
# Visualização do sinal completo com bursts amplificados
ggplot(dados) +
geom_line(aes(x = tempo, y = sinal_total)) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude com Amplificação")
# Criação do filtro Butterworth (ordem 3, 5 Hz)
ordem <- 3
frequencia_corte <- 5
frequencia_normalizada <- frequencia_corte / (frequencia_amostragem / 2)
filtro_butter <- butter(ordem, frequencia_normalizada, type = "low")
freqz(filt = filtro_butter, Fs = frequencia_amostragem)
# Criação do filtro Chebyshev Tipo I (ordem 3, 5 Hz, ripple 0.5 dB)
ripple <- 0.5
filtro_cheby <- cheby1(ordem, ripple, frequencia_normalizada, type = "low")
freqz(filt = filtro_cheby, Fs = frequencia_amostragem)
# Aplicação dos filtros
dados$sinal_butter <- filtfilt(filt = filtro_butter, dados$sinal_total)
dados$sinal_cheby <- filtfilt(filt = filtro_cheby, dados$sinal_total)
# Gráfico comparativo dos sinais
cores <- c("Original" = "black", "Butterworth" = "darkorange", "Chebyshev" = "darkgreen")
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
# Zoom no primeiro burst (0 a 3 segundos)
ggplot(data.frame()) +
geom_line(data = dados, aes(x = tempo, y = sinal_total, color = "Original")) +
geom_line(data = dados, aes(x = tempo, y = sinal_butter, color = "Butterworth")) +
geom_line(data = dados, aes(x = tempo, y = sinal_cheby, color = "Chebyshev")) +
theme_bw(base_size = 20) +
coord_cartesian(xlim = c(0, 3)) +
labs(x = "Tempo(s)", y = "Amplitude do Sinal", color = "Tipo de Sinal") +
scale_color_manual(values = cores)
